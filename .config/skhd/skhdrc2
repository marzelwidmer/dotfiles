# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

alt - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~
#alt - return : /Applications/kitty.app/Contents/MacOS/kitty -d ~

# Toggle mouse focus mode
shift + alt - m : [[ $(yabai -m config focus_follows_mouse) = "disabled" ]] && \
    yabai -m config focus_follows_mouse autoraise || \
    yabai -m config focus_follows_mouse off

# focus window
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north

alt - escape : yabai -m window --focus recent

# cycle windows forwards
alt - n : yabai -m window --focus next || yabai -m window --focus first
# cycle windows backwards
shift + alt - n : yabai -m window --focus prev || yabai -m window --focus last

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north

# swap with largest window
ctrl + alt - return : yabai -m window --swap largest

# move managed window
shift + ctrl + alt - h : yabai -m window --warp west || $(yabai -m window --display west; yabai -m display --focus west)
shift + ctrl + alt - l : yabai -m window --warp east || $(yabai -m window --display east; yabai -m display --focus east)
shift + ctrl + alt - j : yabai -m window --warp south || $(yabai -m window --display south; yabai -m display --focus south)
shift + ctrl + alt - k : yabai -m window --warp north || $(yabai -m window --display north; yabai -m display --focus north)

# stacking
alt - s : yabai -m window --stack east

# balance size of windows
alt - space : yabai -m space --balance

# make floating window fill screen
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

shift + alt - left : yabai -m window --space prev
shift + alt - right : yabai -m window --space next
shift + alt - 1 : yabai -m window --space 1
shift + alt - 2 : yabai -m window --space 2
shift + alt - 3 : yabai -m window --space 3
shift + alt - 4 : yabai -m window --space 4
shift + alt - 5 : yabai -m window --space 5

# focus monitor
shift + ctrl - h  : yabai -m display --focus west || yabai -m display --focus east
shift + ctrl - k  : yabai -m display --focus north || yabai -m display --focus south
shift + ctrl - l  : yabai -m display --focus east || yabai -m display --focus west
shift + ctrl - j  : yabai -m display --focus south || yabai -m display --focus north

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
#cmd + alt - h : yabai -m window --resize left:-20:0
#cmd + alt - k : yabai -m window --resize top:0:-20

# decrease window size
#cmd + alt - l : yabai -m window --resize right:-20:0
#cmd + alt - j : yabai -m window --resize top:0:20

# change window sizes
ctrl + alt - h : yabai -m window --resize left:-20:0 ; yabai -m window --resize right:-20:0
ctrl + alt - j : yabai -m window --resize bottom:0:20 ; yabai -m window --resize top:0:20
ctrl + alt - k : yabai -m window --resize top:0:-20 ; yabai -m window --resize bottom:0:-20
ctrl + alt - l : yabai -m window --resize right:20:0 ; yabai -m window --resize left:20:0

# Rotate windows clockwise and anticlockwise
alt - r         : yabai -m space --rotate 270
shift + alt - r : yabai -m space --rotate 90

# Rotate on X and Y Axis
shift + alt - x : yabai -m space --mirror x-axis
shift + alt - y : yabai -m space --mirror y-axis

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window split type
alt - v : yabai -m window --toggle split

# float / unfloat window and center on screen
 alt + shift - space: yabai -m window --toggle float;\
       yabai -m window --grid 9:5:1:1:3:7

# focus apps
cmd + ctrl - i : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app == "IntelliJ IDEA"))[0].id')
cmd + ctrl - f : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app == "Firefox"))[0].id')
cmd + ctrl - s : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app == "Slack"))[0].id')
# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
